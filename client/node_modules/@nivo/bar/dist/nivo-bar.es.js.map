{"version":3,"file":"nivo-bar.es.js","sources":["../src/BarAnnotations.tsx","../src/BarLegends.tsx","../src/BarItem.tsx","../src/BarTooltip.tsx","../src/props.ts","../src/compute/common.ts","../src/compute/grouped.ts","../src/compute/stacked.ts","../src/compute/legends.ts","../src/hooks.ts","../src/Bar.tsx","../src/BarCanvas.tsx","../src/ResponsiveBar.tsx","../src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarSvgProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: ResponsiveBarSvgProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport type ResponsiveBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'height' | 'width'\n>\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: ResponsiveBarCanvasProps<RawDatum>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","_ref","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","_ref2","size","Math","max","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BarLegends","legends","toggleSerie","_legend$data","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","undefined","BarItem","_data$fill","_ref$bar","_objectWithoutPropertiesLoose","_excluded","_ref$style","style","borderColor","color","labelColor","labelOpacity","labelX","labelY","transform","borderRadius","borderWidth","label","shouldRenderLabel","isInteractive","onClick","onMouseEnter","onMouseLeave","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","theme","useTheme","_useTooltip","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","value","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","BarTooltip","BasicTooltip","id","formattedValue","enableChip","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","colorBy","colors","scheme","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","_ref$innerPadding","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","_xScale","d","_yScale","_coerceValue","rawValue","barHeight","_yScale2","getHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","_ref2$innerPadding","_yScale3","_xScale2","_coerceValue2","_xScale3","getWidth","generateGroupedBars","_ref3","_scale","_ref3$padding","_ref3$innerPadding","indexScaleConfig","_ref3$hiddenIds","hiddenIds","props","filter","includes","_ref4","otherAxis","scaleSpec","clampMin","values","entry","concat","k","Boolean","apply","isFinite","scale","_ref5","bandwidth","params","flattenDeep","arr","some","isArray","generateVerticalStackedBars","stackedData","stackedDataItem","_getY","getY","generateHorizontalStackedBars","_getX","getX","generateStackedBars","array","_ref4$padding","_ref4$hiddenIds","stack","offset","stackOffsetDiverging","num","_ref6","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","uniqBy","_bar$data$indexValue","_bar$color2","getLegendDataForIndexes","_bar$color","getLegendDataForKeys","useBar","_ref$indexBy","_ref$keys","_ref$label","_ref$tooltipLabel","valueFormat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$labelTextColor","_ref$groupMode","_ref$layout","_ref$reverse","_ref$minValue","_ref$maxValue","_ref$padding","_ref$valueScale","_ref$indexScale","_ref$initialHiddenIds","_ref$enableLabel","_ref$labelSkipWidth","_ref$labelSkipHeight","_ref$legends","_useState","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","_generateBars","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$barComponent","_ref$markers","_ref$defs","_ref$fill","_ref$borderRadius","_ref$borderWidth","_ref$annotations","_ref$isInteractive","_ref$tooltip","_ref$role","_ref$isFocusable","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","_useMotionConfig","useMotionConfig","springConfig","config","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBar","transition","useTransition","enter","update","leave","immediate","initial","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","Bar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","_ref$renderBar","renderBar","ctx","_ref2$bar","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","_ref$pixelRatio","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","_canvasEl$current","current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","_getRelativeCursor3","ref","canvas","cursor","BarCanvas","forwardRef","ResponsiveBar","ResponsiveWrapper","ResponsiveBarCanvas"],"mappings":"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"}