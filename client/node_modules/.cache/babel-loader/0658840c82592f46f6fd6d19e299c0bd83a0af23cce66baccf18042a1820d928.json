{"ast":null,"code":"function groupDataBySegments(data, days) {\n  const segments = {};\n  const currentDate = new Date();\n  const currentTimestamp = currentDate.getTime();\n  const segmentDuration = 24 * 60 * 60 * 1000;\n  data.forEach(([sentiment, timestamp]) => {\n    const timestampNum = parseInt(timestamp);\n    const daysAgo = Math.floor((currentTimestamp - timestampNum) / (segmentDuration * days));\n    const segmentStart = currentTimestamp - daysAgo * segmentDuration * days;\n    const segmentKey = new Date(segmentStart).toISOString().slice(0, 10);\n    if (!segments[segmentKey]) {\n      segments[segmentKey] = [0, 0, 0];\n    }\n    if (sentiment == \"positive\") {\n      segments[segmentKey][0] = segments[segmentKey][0] + 1;\n    } else if (sentiment == \"negative\") {\n      segments[segmentKey][1] = segments[segmentKey][1] + 1;\n    } else {\n      segments[segmentKey][2] = segments[segmentKey][2] + 1;\n    }\n\n    // Add data point to the segment\n    //segments[segmentKey].push([sentiment, timestamp]);\n  });\n  return segments;\n}\nexport default groupDataBySegments;","map":{"version":3,"names":["groupDataBySegments","data","days","segments","currentDate","Date","currentTimestamp","getTime","segmentDuration","forEach","sentiment","timestamp","timestampNum","parseInt","daysAgo","Math","floor","segmentStart","segmentKey","toISOString","slice"],"sources":["C:/Users/Caio/Documents/GeauxFrontend/wsb-analytics/client/src/Utils/SegmentDataUtil.tsx"],"sourcesContent":["function groupDataBySegments(data: any[], days: number) {\r\n    const segments: { [key: string]: any[] } = {};\r\n\r\n    const currentDate = new Date();\r\n    const currentTimestamp = currentDate.getTime();\r\n\r\n    const segmentDuration = 24 * 60 * 60 * 1000;\r\n\r\n    data.forEach(([sentiment, timestamp]) => {\r\n      const timestampNum = parseInt(timestamp);\r\n\r\n      const daysAgo = Math.floor(\r\n        (currentTimestamp - timestampNum) / (segmentDuration * days)\r\n      );\r\n      const segmentStart = currentTimestamp - daysAgo * segmentDuration * days;\r\n      const segmentKey = new Date(segmentStart).toISOString().slice(0, 10);\r\n\r\n      if (!segments[segmentKey]) {\r\n        segments[segmentKey] = [0, 0, 0];\r\n      }\r\n\r\n      if (sentiment == \"positive\") {\r\n        segments[segmentKey][0] = segments[segmentKey][0] + 1;\r\n      } else if (sentiment == \"negative\") {\r\n        segments[segmentKey][1] = segments[segmentKey][1] + 1;\r\n      } else {\r\n        segments[segmentKey][2] = segments[segmentKey][2] + 1;\r\n      }\r\n\r\n      // Add data point to the segment\r\n      //segments[segmentKey].push([sentiment, timestamp]);\r\n    });\r\n    return segments;\r\n  }\r\n\r\nexport default groupDataBySegments;"],"mappings":"AAAA,SAASA,mBAAmBA,CAACC,IAAW,EAAEC,IAAY,EAAE;EACpD,MAAMC,QAAkC,GAAG,CAAC,CAAC;EAE7C,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,gBAAgB,GAAGF,WAAW,CAACG,OAAO,CAAC,CAAC;EAE9C,MAAMC,eAAe,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EAE3CP,IAAI,CAACQ,OAAO,CAAC,CAAC,CAACC,SAAS,EAAEC,SAAS,CAAC,KAAK;IACvC,MAAMC,YAAY,GAAGC,QAAQ,CAACF,SAAS,CAAC;IAExC,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAK,CACxB,CAACV,gBAAgB,GAAGM,YAAY,KAAKJ,eAAe,GAAGN,IAAI,CAC7D,CAAC;IACD,MAAMe,YAAY,GAAGX,gBAAgB,GAAGQ,OAAO,GAAGN,eAAe,GAAGN,IAAI;IACxE,MAAMgB,UAAU,GAAG,IAAIb,IAAI,CAACY,YAAY,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAEpE,IAAI,CAACjB,QAAQ,CAACe,UAAU,CAAC,EAAE;MACzBf,QAAQ,CAACe,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClC;IAEA,IAAIR,SAAS,IAAI,UAAU,EAAE;MAC3BP,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGf,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,CAAC,MAAM,IAAIR,SAAS,IAAI,UAAU,EAAE;MAClCP,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGf,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,CAAC,MAAM;MACLf,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGf,QAAQ,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD;;IAEA;IACA;EACF,CAAC,CAAC;EACF,OAAOf,QAAQ;AACjB;AAEF,eAAeH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}