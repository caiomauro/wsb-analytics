{"ast":null,"code":"const fetchData = (count, entries) => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://127.0.0.1:8000/api/sentiment-pairs/?count=${count}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      const stocks_arr = new Set();\n      //setData(visualization(data.stock_sentiments, entries));\n      for (let i = 0; i < data.stock_sentiments.length; i++) {\n        if (data.stock_sentiments[i][0].length > 5 || data.stock_sentiments[i][0] === \"N/A\" || data.stock_sentiments[i][0] === \"Tesla\" || data.stock_sentiments[i][0] === \"bonds\") {\n          continue;\n        } else {\n          stocks_arr.add(data.stock_sentiments[i][0]);\n        }\n      }\n      //setAllStocks(Array.from(stocks_arr).sort());\n      const sortedStocks = Array.from(stocks_arr).sort();\n      resolve({\n        sortedStocks,\n        stockSentiments: data.stock_sentiments,\n        entries\n      });\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nconst fetchDataRange = (stock, range, days) => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://127.0.0.1:8000/api/sentiment-pairs/range/?starting_date=${range}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n      resolve({\n        stockSentiments: data.stock_sentiments,\n        days,\n        stock\n      });\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nconst fetchAllStockMentions = () => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://127.0.0.1:8000/api/stock-mentions/`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n      resolve({\n        allStockMentions: data.stock_mentions\n      });\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nconst fetchLimitStockMentions = limit => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://127.0.0.1:8000/api/stock-mentions/limit/?limit=${limit}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n      resolve({\n        limitStockMentions: data.stock_mentions\n      });\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nconst fetchStocksMention = stock => {\n  return new Promise((resolve, reject) => {\n    fetch(`http://127.0.0.1:8000/api/stock-mentions/stock/?stock=${stock}`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n      resolve({\n        stocksMention: data.stock_stat\n      });\n    }).catch(error => {\n      reject(error);\n    });\n  });\n};\nexport { fetchAllStockMentions, fetchData, fetchDataRange, fetchLimitStockMentions, fetchStocksMention };","map":{"version":3,"names":["fetchData","count","entries","Promise","resolve","reject","fetch","then","response","ok","Error","json","data","stocks_arr","Set","i","stock_sentiments","length","add","sortedStocks","Array","from","sort","stockSentiments","catch","error","fetchDataRange","stock","range","days","fetchAllStockMentions","allStockMentions","stock_mentions","fetchLimitStockMentions","limit","limitStockMentions","fetchStocksMention","stocksMention","stock_stat"],"sources":["/Users/rutemauro/Documents/GitHub/wsb-analytics/client/src/Services/ServerApi.tsx"],"sourcesContent":["\nconst fetchData = (count: number, entries: number): Promise<{ sortedStocks: string[], stockSentiments: any[], entries: number }> => {\n    return new Promise((resolve, reject) => {\n        fetch(`http://127.0.0.1:8000/api/sentiment-pairs/?count=${count}`)\n        .then((response) => {\n            if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            const stocks_arr = new Set<string>();\n            //setData(visualization(data.stock_sentiments, entries));\n            for (let i = 0; i < data.stock_sentiments.length; i++) {\n            if (\n                data.stock_sentiments[i][0].length > 5 ||\n                data.stock_sentiments[i][0] === \"N/A\" ||\n                data.stock_sentiments[i][0] === \"Tesla\" ||\n                data.stock_sentiments[i][0] === \"bonds\"\n            ) {\n                continue;\n            } else {\n                stocks_arr.add(data.stock_sentiments[i][0]);\n            }\n            }\n            //setAllStocks(Array.from(stocks_arr).sort());\n            const sortedStocks = Array.from(stocks_arr).sort();\n            resolve({ sortedStocks, stockSentiments: data.stock_sentiments, entries });\n        })\n        .catch((error) => {\n            reject(error);\n        });\n    });\n};\n\nconst fetchDataRange = (stock: string, range: string, days: number): Promise<{ stockSentiments: any[], days: number, stock: string }> => {\n    return new Promise((resolve, reject) => {\n        fetch(\n        `http://127.0.0.1:8000/api/sentiment-pairs/range/?starting_date=${range}`\n        )\n        .then((response) => {\n            if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n            resolve({ stockSentiments: data.stock_sentiments, days, stock });\n        })\n        .catch((error) => {\n            reject(error);\n        });\n    });\n};\n\nconst fetchAllStockMentions = (): Promise<{ allStockMentions: any[] }> => {\n    return new Promise((resolve, reject) => {\n        fetch(\n        `http://127.0.0.1:8000/api/stock-mentions/`\n        )\n        .then((response) => {\n            if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n            resolve({ allStockMentions: data.stock_mentions });\n        })\n        .catch((error) => {\n            reject(error);\n        });\n    });\n};\n\nconst fetchLimitStockMentions = ( limit: number ): Promise<{ limitStockMentions: any[] }> => {\n    return new Promise((resolve, reject) => {\n        fetch(\n        `http://127.0.0.1:8000/api/stock-mentions/limit/?limit=${limit}`\n        )\n        .then((response) => {\n            if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n            resolve({ limitStockMentions: data.stock_mentions });\n        })\n        .catch((error) => {\n            reject(error);\n        });\n    });\n};\n\nconst fetchStocksMention = ( stock: string ): Promise<{ stocksMention: any[] }> => {\n    return new Promise((resolve, reject) => {\n        fetch(\n        `http://127.0.0.1:8000/api/stock-mentions/stock/?stock=${stock}`\n        )\n        .then((response) => {\n            if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n            }\n            return response.json();\n        })\n        .then((data) => {\n            //setRangeData(visualizationTimeline(stock, data.stock_sentiments, days));\n            resolve({ stocksMention: data.stock_stat });\n        })\n        .catch((error) => {\n            reject(error);\n        });\n    });\n};\n  \n\nexport { fetchAllStockMentions, fetchData, fetchDataRange, fetchLimitStockMentions, fetchStocksMention };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}