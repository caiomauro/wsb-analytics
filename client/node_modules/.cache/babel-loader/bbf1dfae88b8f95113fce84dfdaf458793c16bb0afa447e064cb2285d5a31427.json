{"ast":null,"code":"import n from \"lodash/uniq\";\nimport t from \"lodash/uniqBy\";\nimport r from \"lodash/sortBy\";\nimport e from \"lodash/last\";\nimport a from \"lodash/isDate\";\nimport { utcParse as i, timeParse as o } from \"d3-time-format\";\nimport { scaleLinear as u, scalePoint as c, scaleBand as s, scaleUtc as d, scaleTime as f, scaleLog as l, scaleSymlog as m } from \"d3-scale\";\nimport { timeInterval as v, timeMillisecond as y, utcMillisecond as p, timeSecond as h, utcSecond as g, timeMinute as x, utcMinute as k, timeHour as T, utcHour as b, timeWeek as M, utcWeek as w, timeSunday as E, utcSunday as S, timeMonday as D, utcMonday as C, timeTuesday as U, utcTuesday as j, timeWednesday as O, utcWednesday as R, timeThursday as H, utcThursday as V, timeFriday as q, utcFriday as A, timeSaturday as B, utcSaturday as F, timeMonth as N, utcMonth as z, timeYear as I, utcYear as P } from \"d3-time\";\nfunction $() {\n  return $ = Object.assign ? Object.assign.bind() : function (n) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = arguments[t];\n      for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && (n[e] = r[e]);\n    }\n    return n;\n  }, $.apply(this, arguments);\n}\nvar G = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"],\n  J = [function (n) {\n    return n.setMilliseconds(0);\n  }, function (n) {\n    return n.setSeconds(0);\n  }, function (n) {\n    return n.setMinutes(0);\n  }, function (n) {\n    return n.setHours(0);\n  }, function (n) {\n    return n.setDate(1);\n  }, function (n) {\n    return n.setMonth(0);\n  }],\n  K = {\n    millisecond: [],\n    second: J.slice(0, 1),\n    minute: J.slice(0, 2),\n    hour: J.slice(0, 3),\n    day: J.slice(0, 4),\n    month: J.slice(0, 5),\n    year: J.slice(0, 6)\n  },\n  L = function (n) {\n    return function (t) {\n      return K[n].forEach(function (n) {\n        n(t);\n      }), t;\n    };\n  },\n  Q = function (n) {\n    var t = n.format,\n      r = void 0 === t ? \"native\" : t,\n      e = n.precision,\n      a = void 0 === e ? \"millisecond\" : e,\n      u = n.useUTC,\n      c = void 0 === u || u,\n      s = L(a);\n    return function (n) {\n      if (void 0 === n) return n;\n      if (\"native\" === r || n instanceof Date) return s(n);\n      var t = c ? i(r) : o(r);\n      return s(t(n));\n    };\n  },\n  W = function (n, t, r, e) {\n    var a,\n      i,\n      o,\n      c,\n      s = n.min,\n      d = void 0 === s ? 0 : s,\n      f = n.max,\n      l = void 0 === f ? \"auto\" : f,\n      m = n.stacked,\n      v = void 0 !== m && m,\n      y = n.reverse,\n      p = void 0 !== y && y,\n      h = n.clamp,\n      g = void 0 !== h && h,\n      x = n.nice,\n      k = void 0 !== x && x;\n    \"auto\" === d ? a = !0 === v ? null != (i = t.minStacked) ? i : 0 : t.min : a = d;\n    \"auto\" === l ? o = !0 === v ? null != (c = t.maxStacked) ? c : 0 : t.max : o = l;\n    var T = u().rangeRound(\"x\" === e ? [0, r] : [r, 0]).domain(p ? [o, a] : [a, o]).clamp(g);\n    return !0 === k ? T.nice() : \"number\" == typeof k && T.nice(k), X(T, v);\n  },\n  X = function (n, t) {\n    void 0 === t && (t = !1);\n    var r = n;\n    return r.type = \"linear\", r.stacked = t, r;\n  },\n  Y = function (n, t, r) {\n    var e = c().range([0, r]).domain(t.all);\n    return e.type = \"point\", e;\n  },\n  Z = function (n) {\n    var t = n;\n    return t.type = \"point\", t;\n  },\n  _ = function (n, t, r, e) {\n    var a = n.round,\n      i = void 0 === a || a,\n      o = s().range(\"x\" === e ? [0, r] : [r, 0]).domain(t.all).round(i);\n    return nn(o);\n  },\n  nn = function (n) {\n    var t = n;\n    return t.type = \"band\", t;\n  },\n  tn = function (n, t, r) {\n    var e,\n      a,\n      i = n.format,\n      o = void 0 === i ? \"native\" : i,\n      u = n.precision,\n      c = void 0 === u ? \"millisecond\" : u,\n      s = n.min,\n      l = void 0 === s ? \"auto\" : s,\n      m = n.max,\n      v = void 0 === m ? \"auto\" : m,\n      y = n.useUTC,\n      p = void 0 === y || y,\n      h = n.nice,\n      g = void 0 !== h && h,\n      x = Q({\n        format: o,\n        precision: c,\n        useUTC: p\n      });\n    e = \"auto\" === l ? x(t.min) : \"native\" !== o ? x(l) : l, a = \"auto\" === v ? x(t.max) : \"native\" !== o ? x(v) : v;\n    var k = p ? d() : f();\n    k.range([0, r]), e && a && k.domain([e, a]), !0 === g ? k.nice() : \"object\" != typeof g && \"number\" != typeof g || k.nice(g);\n    var T = k;\n    return T.type = \"time\", T.useUTC = p, T;\n  },\n  rn = function (n, t, r, e) {\n    var a,\n      i = n.base,\n      o = void 0 === i ? 10 : i,\n      u = n.min,\n      c = void 0 === u ? \"auto\" : u,\n      s = n.max,\n      d = void 0 === s ? \"auto\" : s;\n    if (t.all.some(function (n) {\n      return 0 === n;\n    })) throw new Error(\"a log scale domain must not include or cross zero\");\n    var f,\n      m,\n      v = !1;\n    if (t.all.filter(function (n) {\n      return null != n;\n    }).forEach(function (n) {\n      v || (void 0 === a ? a = Math.sign(n) : Math.sign(n) !== a && (v = !0));\n    }), v) throw new Error(\"a log scale domain must be strictly-positive or strictly-negative\");\n    f = \"auto\" === c ? t.min : c, m = \"auto\" === d ? t.max : d;\n    var y = l().domain([f, m]).rangeRound(\"x\" === e ? [0, r] : [r, 0]).base(o).nice();\n    return y.type = \"log\", y;\n  },\n  en = function (n, t, r, e) {\n    var a,\n      i,\n      o = n.constant,\n      u = void 0 === o ? 1 : o,\n      c = n.min,\n      s = void 0 === c ? \"auto\" : c,\n      d = n.max,\n      f = void 0 === d ? \"auto\" : d,\n      l = n.reverse,\n      v = void 0 !== l && l;\n    a = \"auto\" === s ? t.min : s, i = \"auto\" === f ? t.max : f;\n    var y = m().constant(u).rangeRound(\"x\" === e ? [0, r] : [r, 0]).nice();\n    !0 === v ? y.domain([i, a]) : y.domain([a, i]);\n    var p = y;\n    return p.type = \"symlog\", p;\n  },\n  an = function (n) {\n    return \"x\" === n ? \"y\" : \"x\";\n  },\n  on = function (n, t) {\n    return n === t;\n  },\n  un = function (n, t) {\n    return n.getTime() === t.getTime();\n  };\nfunction cn(n, t, r, e) {\n  switch (n.type) {\n    case \"linear\":\n      return W(n, t, r, e);\n    case \"point\":\n      return Y(n, t, r);\n    case \"band\":\n      return _(n, t, r, e);\n    case \"time\":\n      return tn(n, t, r);\n    case \"log\":\n      return rn(n, t, r, e);\n    case \"symlog\":\n      return en(n, t, r, e);\n    default:\n      throw new Error(\"invalid scale spec\");\n  }\n}\nvar sn = function (n, t, r) {\n    var e;\n    if (\"stacked\" in r && r.stacked) {\n      var a = n.data[\"x\" === t ? \"xStacked\" : \"yStacked\"];\n      return null == a ? null : r(a);\n    }\n    return null != (e = r(n.data[t])) ? e : null;\n  },\n  dn = function (n, t, r, e, a) {\n    var i = n.map(function (n) {\n        return function (n) {\n          return $({}, n, {\n            data: n.data.map(function (n) {\n              return {\n                data: $({}, n)\n              };\n            })\n          });\n        }(n);\n      }),\n      o = fn(i, t, r);\n    \"stacked\" in t && !0 === t.stacked && vn(o, i), \"stacked\" in r && !0 === r.stacked && yn(o, i);\n    var u = cn(t, o.x, e, \"x\"),\n      c = cn(r, o.y, a, \"y\"),\n      s = i.map(function (n) {\n        return $({}, n, {\n          data: n.data.map(function (n) {\n            return $({}, n, {\n              position: {\n                x: sn(n, \"x\", u),\n                y: sn(n, \"y\", c)\n              }\n            });\n          })\n        });\n      });\n    return $({}, o, {\n      series: s,\n      xScale: u,\n      yScale: c\n    });\n  },\n  fn = function (n, t, r) {\n    return {\n      x: ln(n, \"x\", t),\n      y: ln(n, \"y\", r)\n    };\n  },\n  ln = function (a, i, o, u) {\n    var c = void 0 === u ? {} : u,\n      s = c.getValue,\n      d = void 0 === s ? function (n) {\n        return n.data[i];\n      } : s,\n      f = c.setValue,\n      l = void 0 === f ? function (n, t) {\n        n.data[i] = t;\n      } : f;\n    if (\"linear\" === o.type) a.forEach(function (n) {\n      n.data.forEach(function (n) {\n        var t = d(n);\n        t && l(n, parseFloat(String(t)));\n      });\n    });else if (\"time\" === o.type && \"native\" !== o.format) {\n      var m = Q(o);\n      a.forEach(function (n) {\n        n.data.forEach(function (n) {\n          var t = d(n);\n          t && l(n, m(t));\n        });\n      });\n    }\n    var v = [];\n    switch (a.forEach(function (n) {\n      n.data.forEach(function (n) {\n        v.push(d(n));\n      });\n    }), o.type) {\n      case \"linear\":\n        var y = r(n(v).filter(function (n) {\n          return null !== n;\n        }), function (n) {\n          return n;\n        });\n        return {\n          all: y,\n          min: Math.min.apply(Math, y),\n          max: Math.max.apply(Math, y)\n        };\n      case \"time\":\n        var p = t(v, function (n) {\n          return n.getTime();\n        }).slice(0).sort(function (n, t) {\n          return t.getTime() - n.getTime();\n        }).reverse();\n        return {\n          all: p,\n          min: p[0],\n          max: e(p)\n        };\n      default:\n        var h = n(v);\n        return {\n          all: h,\n          min: h[0],\n          max: e(h)\n        };\n    }\n  },\n  mn = function (n, t, r) {\n    var i = an(n),\n      o = [];\n    t[i].all.forEach(function (t) {\n      var u = a(t) ? un : on,\n        c = [];\n      r.forEach(function (r) {\n        var a = r.data.find(function (n) {\n            return u(n.data[i], t);\n          }),\n          s = null,\n          d = null;\n        if (void 0 !== a) {\n          if (null !== (s = a.data[n])) {\n            var f = e(c);\n            void 0 === f ? d = s : null !== f && (d = f + s);\n          }\n          a.data[\"x\" === n ? \"xStacked\" : \"yStacked\"] = d;\n        }\n        c.push(d), null !== d && o.push(d);\n      });\n    }), t[n].minStacked = Math.min.apply(Math, o), t[n].maxStacked = Math.max.apply(Math, o);\n  },\n  vn = function (n, t) {\n    return mn(\"x\", n, t);\n  },\n  yn = function (n, t) {\n    return mn(\"y\", n, t);\n  },\n  pn = function (n) {\n    var t = n.bandwidth();\n    if (0 === t) return n;\n    var r = t / 2;\n    return n.round() && (r = Math.round(r)), function (t) {\n      var e;\n      return (null != (e = n(t)) ? e : 0) + r;\n    };\n  },\n  hn = {\n    millisecond: [y, p],\n    second: [h, g],\n    minute: [x, k],\n    hour: [T, b],\n    day: [v(function (n) {\n      return n.setHours(0, 0, 0, 0);\n    }, function (n, t) {\n      return n.setDate(n.getDate() + t);\n    }, function (n, t) {\n      return (t.getTime() - n.getTime()) / 864e5;\n    }, function (n) {\n      return Math.floor(n.getTime() / 864e5);\n    }), v(function (n) {\n      return n.setUTCHours(0, 0, 0, 0);\n    }, function (n, t) {\n      return n.setUTCDate(n.getUTCDate() + t);\n    }, function (n, t) {\n      return (t.getTime() - n.getTime()) / 864e5;\n    }, function (n) {\n      return Math.floor(n.getTime() / 864e5);\n    })],\n    week: [M, w],\n    sunday: [E, S],\n    monday: [D, C],\n    tuesday: [U, j],\n    wednesday: [O, R],\n    thursday: [H, V],\n    friday: [q, A],\n    saturday: [B, F],\n    month: [N, z],\n    year: [I, P]\n  },\n  gn = Object.keys(hn),\n  xn = new RegExp(\"^every\\\\s*(\\\\d+)?\\\\s*(\" + gn.join(\"|\") + \")s?$\", \"i\"),\n  kn = function (n, t) {\n    if (Array.isArray(t)) return t;\n    if (\"string\" == typeof t && \"useUTC\" in n) {\n      var r = t.match(xn);\n      if (r) {\n        var e = r[1],\n          a = r[2],\n          i = hn[a][n.useUTC ? 1 : 0];\n        if (\"day\" === a) {\n          var o,\n            u,\n            c = n.domain(),\n            s = c[0],\n            d = c[1],\n            f = new Date(d);\n          return f.setDate(f.getDate() + 1), null != (o = null == (u = i.every(Number(null != e ? e : 1))) ? void 0 : u.range(s, f)) ? o : [];\n        }\n        if (void 0 === e) return n.ticks(i);\n        var l = i.every(Number(e));\n        if (l) return n.ticks(l);\n      }\n      throw new Error(\"Invalid tickValues: \" + t);\n    }\n    if (\"ticks\" in n) {\n      if (void 0 === t) return n.ticks();\n      if (\"number\" == typeof (m = t) && isFinite(m) && Math.floor(m) === m) return n.ticks(t);\n    }\n    var m;\n    return n.domain();\n  };\nexport { nn as castBandScale, X as castLinearScale, Z as castPointScale, pn as centerScale, un as compareDateValues, on as compareValues, cn as computeScale, dn as computeXYScalesForSeries, _ as createBandScale, Q as createDateNormalizer, W as createLinearScale, rn as createLogScale, Y as createPointScale, L as createPrecisionMethod, en as createSymlogScale, tn as createTimeScale, ln as generateSeriesAxis, fn as generateSeriesXY, an as getOtherAxis, kn as getScaleTicks, J as precisionCutOffs, K as precisionCutOffsByType, mn as stackAxis, G as timePrecisions };","map":{"version":3,"names":["G","J","n","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","K","millisecond","second","slice","minute","hour","day","month","year","L","createPrecisionMethod","t","forEach","Q","createDateNormalizer","format","r","e","precision","a","u","useUTC","c","s","Date","i","o","W","createLinearScale","min","d","f","max","l","m","stacked","v","y","reverse","p","h","clamp","g","x","nice","k","minStacked","maxStacked","T","rangeRound","domain","X","castLinearScale","type","Y","createPointScale","range","all","Z","castPointScale","_","createBandScale","round","nn","castBandScale","tn","createTimeScale","rn","createLogScale","base","some","Error","filter","Math","sign","en","createSymlogScale","constant","an","getOtherAxis","on","compareValues","un","compareDateValues","getTime","cn","sn","getDatumAxisPosition","data","dn","computeXYScalesForSeries","map","$","fn","vn","yn","position","series","xScale","yScale","generateSeriesXY","ln","generateSeriesAxis","getValue","setValue","parseFloat","String","push","apply","sort","mn","stackAxis","find","stackX","stackY","pn","centerScale","bandwidth","hn","b","getDate","floor","setUTCHours","setUTCDate","getUTCDate","week","M","w","sunday","E","S","monday","D","C","tuesday","U","j","wednesday","O","R","thursday","H","V","friday","q","A","saturday","B","F","N","z","I","P","gn","Object","keys","xn","RegExp","join","kn","getScaleTicks","Array","isArray","match","every","Number","ticks","isFinite","computeScale","precisionCutOffs","precisionCutOffsByType","timePrecisions"],"sources":["C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\timeHelpers.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\linearScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\pointScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\bandScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\timeScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\logScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\symlogScale.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\compute.ts","C:\\Users\\Caio\\Documents\\GeauxFrontend\\wsb-analytics\\client\\node_modules\\@nivo\\scales\\src\\ticks.ts"],"sourcesContent":["import { timeParse, utcParse } from 'd3-time-format'\n\nexport const timePrecisions = [\n    'millisecond',\n    'second',\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year',\n] as const\n\nexport type TIME_PRECISION = (typeof timePrecisions)[number]\n\nexport const precisionCutOffs: ((date: Date) => void)[] = [\n    date => date.setMilliseconds(0),\n    date => date.setSeconds(0),\n    date => date.setMinutes(0),\n    date => date.setHours(0),\n    date => date.setDate(1),\n    date => date.setMonth(0),\n]\n\nexport const precisionCutOffsByType: Record<TIME_PRECISION, ((date: Date) => void)[]> = {\n    millisecond: [],\n    second: precisionCutOffs.slice(0, 1),\n    minute: precisionCutOffs.slice(0, 2),\n    hour: precisionCutOffs.slice(0, 3),\n    day: precisionCutOffs.slice(0, 4),\n    month: precisionCutOffs.slice(0, 5),\n    year: precisionCutOffs.slice(0, 6),\n}\n\nexport const createPrecisionMethod = (precision: TIME_PRECISION) => (date: Date) => {\n    precisionCutOffsByType[precision].forEach(cutOff => {\n        cutOff(date)\n    })\n\n    return date\n}\n\nexport const createDateNormalizer = ({\n    format = 'native',\n    precision = 'millisecond',\n    useUTC = true,\n}: {\n    format?: 'native' | string\n    precision?: TIME_PRECISION\n    useUTC?: boolean\n}) => {\n    const precisionFn = createPrecisionMethod(precision)\n\n    return (value: Date | string | undefined) => {\n        if (value === undefined) {\n            return value\n        }\n\n        if (format === 'native' || value instanceof Date) {\n            return precisionFn(value as Date)\n        }\n\n        const parseTime = useUTC ? utcParse(format) : timeParse(format)\n        return precisionFn(parseTime(value as string) as Date)\n    }\n}\n","import { NumberValue, scaleLinear, ScaleLinear as D3ScaleLinear } from 'd3-scale'\nimport { ScaleLinearSpec, ScaleLinear, ComputedSerieAxis, ScaleAxis } from './types'\n\nexport const createLinearScale = <Output extends NumberValue>(\n    {\n        min = 0,\n        max = 'auto',\n        stacked = false,\n        reverse = false,\n        clamp = false,\n        nice = false,\n    }: ScaleLinearSpec,\n    data: ComputedSerieAxis<Output>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: NumberValue\n    if (min === 'auto') {\n        minValue = stacked === true ? data.minStacked ?? 0 : data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: NumberValue\n    if (max === 'auto') {\n        maxValue = stacked === true ? data.maxStacked ?? 0 : data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLinear<number, Output>()\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .domain(reverse ? [maxValue, minValue] : [minValue, maxValue])\n        .clamp(clamp)\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    return castLinearScale<number, Output>(scale, stacked)\n}\n\nexport const castLinearScale = <Range, Output>(\n    scale: D3ScaleLinear<Range, Output>,\n    stacked = false\n) => {\n    const typedScale = scale as unknown as ScaleLinear<number>\n    typedScale.type = 'linear'\n    typedScale.stacked = stacked\n\n    return typedScale\n}\n","import { scalePoint, ScalePoint as D3ScalePoint } from 'd3-scale'\nimport { ComputedSerieAxis, ScalePoint, ScalePointSpec, StringValue } from './types'\n\nexport const createPointScale = <Input extends StringValue>(\n    _spec: ScalePointSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number\n) => {\n    const scale = scalePoint<Input>().range([0, size]).domain(data.all)\n\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n\nexport const castPointScale = <Input extends StringValue>(scale: D3ScalePoint<Input>) => {\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n","import { scaleBand, ScaleBand as D3ScaleBand } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleBand, ScaleBandSpec, StringValue, ScaleAxis } from './types'\n\nexport const createBandScale = <Input extends StringValue>(\n    { round = true }: ScaleBandSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const scale = scaleBand<Input>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .domain(data.all)\n        .round(round)\n\n    return castBandScale<Input>(scale)\n}\n\nexport const castBandScale = <Input extends StringValue>(scale: D3ScaleBand<Input>) => {\n    const typedScale = scale as ScaleBand<Input>\n    typedScale.type = 'band'\n\n    return typedScale\n}\n","import { NumberValue, scaleTime, scaleUtc } from 'd3-scale'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ComputedSerieAxis, ScaleTime, ScaleTimeSpec } from './types'\n\nexport const createTimeScale = <Input extends Date | NumberValue>(\n    {\n        format = 'native',\n        precision = 'millisecond',\n        min = 'auto',\n        max = 'auto',\n        useUTC = true,\n        nice = false,\n    }: ScaleTimeSpec,\n    data: ComputedSerieAxis<string | Date>,\n    size: number\n) => {\n    const normalize = createDateNormalizer({ format, precision, useUTC })\n\n    let minValue: Date | undefined\n    if (min === 'auto') {\n        minValue = normalize(data.min)\n    } else if (format !== 'native') {\n        minValue = normalize(min)\n    } else {\n        minValue = min as Date\n    }\n\n    let maxValue: Date | undefined\n    if (max === 'auto') {\n        maxValue = normalize(data.max)\n    } else if (format !== 'native') {\n        maxValue = normalize(max)\n    } else {\n        maxValue = max as Date\n    }\n\n    const scale = useUTC ? scaleUtc() : scaleTime()\n\n    scale.range([0, size])\n\n    if (minValue && maxValue) scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = scale as unknown as ScaleTime<Input>\n\n    typedScale.type = 'time'\n    typedScale.useUTC = useUTC\n\n    return typedScale\n}\n","import { scaleLog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleLog, ScaleLogSpec } from './types'\n\nexport const createLogScale = (\n    { base = 10, min = 'auto', max = 'auto' }: ScaleLogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const hasZero = data.all.some(v => v === 0)\n    if (hasZero) {\n        throw new Error(`a log scale domain must not include or cross zero`)\n    }\n\n    let sign: number\n    let hasMixedSign = false\n    data.all\n        .filter(v => v != null)\n        .forEach(v => {\n            if (hasMixedSign) return\n            if (sign === undefined) {\n                sign = Math.sign(v)\n            } else if (Math.sign(v) !== sign) {\n                hasMixedSign = true\n            }\n        })\n\n    if (hasMixedSign) {\n        throw new Error(`a log scale domain must be strictly-positive or strictly-negative`)\n    }\n\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLog<number, number>()\n        .domain([minValue, maxValue])\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .base(base)\n        .nice()\n\n    const typedScale = scale as ScaleLog\n    typedScale.type = 'log'\n\n    return typedScale\n}\n","import { scaleSymlog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleSymlog, ScaleSymlogSpec } from './types'\n\nexport const createSymlogScale = (\n    { constant = 1, min = 'auto', max = 'auto', reverse = false }: ScaleSymlogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleSymlog<number, number>()\n        .constant(constant)\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .nice()\n\n    if (reverse === true) scale.domain([maxValue, minValue])\n    else scale.domain([minValue, maxValue])\n\n    const typedScale = scale as ScaleSymlog\n    typedScale.type = 'symlog'\n\n    return typedScale\n}\n","import uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport last from 'lodash/last'\nimport isDate from 'lodash/isDate'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ScaleAxis, ScaleSpec, ScaleValue, SerieAxis, ComputedSerieAxis } from './types'\nimport { createLinearScale } from './linearScale'\nimport { createPointScale } from './pointScale'\nimport { createBandScale } from './bandScale'\nimport { createTimeScale } from './timeScale'\nimport { createLogScale } from './logScale'\nimport { createSymlogScale } from './symlogScale'\n\ntype XY = ReturnType<typeof generateSeriesXY>\n\ntype StackedXY = {\n    [K in keyof XY]: XY[K] & {\n        maxStacked: number\n        minStacked: number\n    }\n}\n\ninterface SerieDatum {\n    x: number | string | Date\n    // only numbers can be stacked\n    xStacked?: number | null\n    y: number | string | Date\n    // only numbers can be stacked\n    yStacked?: number | null\n}\n\ntype Serie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: D[]\n}\n\ntype NestedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n    }[]\n}\n\nexport type ComputedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n        position: {\n            x: number | null\n            y: number | null\n        }\n    }[]\n}\n\ntype Compare = <T>(a: T, b: T) => boolean\n\nexport const getOtherAxis = (axis: ScaleAxis): ScaleAxis => (axis === 'x' ? 'y' : 'x')\n\nexport const compareValues = (a: string | number, b: string | number) => a === b\nexport const compareDateValues = (a: Date, b: Date) => a.getTime() === b.getTime()\n\nexport function computeScale<Input extends ScaleValue>(\n    spec: ScaleSpec,\n    data: ComputedSerieAxis<any>,\n    size: number,\n    axis: ScaleAxis\n) {\n    switch (spec.type) {\n        case 'linear':\n            return createLinearScale(spec, data, size, axis)\n        case 'point':\n            return createPointScale<Input>(spec, data, size)\n        case 'band':\n            return createBandScale<Input>(spec, data, size, axis)\n        case 'time':\n            return createTimeScale(spec, data, size)\n        case 'log':\n            return createLogScale(spec, data, size, axis)\n        case 'symlog':\n            return createSymlogScale(spec, data, size, axis)\n        default:\n            throw new Error('invalid scale spec')\n    }\n}\n\n/**\n * Convert serie data to have the original data stored in a nested prop.\n *\n * We do this in order to avoid conflicts between raw & computed properties.\n * <- { data: { x: 1, y: 3 }[] }\n * -> { data: { data: { x: 1, y: 3 } }[] }\n */\nconst nestSerieData = <S = never, D extends SerieDatum = SerieDatum>(\n    serie: Serie<S, D>\n): NestedSerie<S, D> => ({\n    ...serie,\n    data: serie.data.map(d => ({ data: { ...d } })),\n})\n\nconst getDatumAxisPosition = <D extends SerieDatum = SerieDatum>(\n    datum: { data: D },\n    axis: ScaleAxis,\n    scale: any\n): number | null => {\n    if ('stacked' in scale && scale.stacked) {\n        const stackedValue = datum.data[axis === 'x' ? 'xStacked' : 'yStacked']\n        if (stackedValue === null || stackedValue === undefined) {\n            return null\n        }\n\n        return scale(stackedValue)\n    }\n\n    return scale(datum.data[axis]) ?? null\n}\n\n/**\n * Compute x/y d3 scales from an array of data series, and scale specifications.\n *\n * We use generics as it's not uncommon to have extra properties such as an id\n * added to the series, or extra props on data, in such case, you should override\n * the default types.\n */\nexport const computeXYScalesForSeries = <S = never, D extends SerieDatum = SerieDatum>(\n    series: Serie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec,\n    width: number,\n    height: number\n) => {\n    // first nest series to avoid property conflicts\n    const nestedSeries = series.map(serie => nestSerieData<S, D>(serie))\n\n    // then compute data for each axis: all, min, max values\n    const xy = generateSeriesXY<S, D>(nestedSeries, xScaleSpec, yScaleSpec)\n\n    // stack x values depending on xScale\n    if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n        stackX<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // stack y values depending on yScale\n    if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n        stackY<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // computes scales\n    const xScale = computeScale<D['x']>(xScaleSpec, xy.x, width, 'x')\n    const yScale = computeScale<D['y']>(yScaleSpec, xy.y, height, 'y')\n\n    // assign position to each datum in every scale\n    const computedSeries: ComputedSerie<S, D>[] = nestedSeries.map(serie => ({\n        ...serie,\n        data: serie.data.map(datum => ({\n            ...datum,\n            position: {\n                x: getDatumAxisPosition(datum, 'x', xScale),\n                y: getDatumAxisPosition(datum, 'y', yScale),\n            },\n        })),\n    }))\n\n    return {\n        ...xy,\n        series: computedSeries,\n        xScale,\n        yScale,\n    }\n}\n\nexport const generateSeriesXY = <S = never, D extends SerieDatum = SerieDatum>(\n    series: NestedSerie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec\n) => ({\n    x: generateSeriesAxis<'x', D['x']>(series, 'x', xScaleSpec),\n    y: generateSeriesAxis<'y', D['y']>(series, 'y', yScaleSpec),\n})\n\n/**\n * Normalize data according to scale type, (time => Date, linear => Number)\n * compute sorted unique values and min/max.\n */\nexport const generateSeriesAxis = <Axis extends ScaleAxis, Value extends ScaleValue>(\n    series: SerieAxis<Axis, Value>,\n    axis: Axis,\n    scaleSpec: ScaleSpec,\n    {\n        getValue = d => d.data[axis],\n        setValue = (d, v) => {\n            d.data[axis] = v\n        },\n    }: {\n        getValue?: (d: { data: Record<Axis, Value | null> }) => Value | null\n        setValue?: (d: { data: Record<Axis, Value | null> }, v: Value) => void\n    } = {}\n) => {\n    if (scaleSpec.type === 'linear') {\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseFloat(String(value)) as unknown as Value)\n                }\n            })\n        })\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        // `native` means we already have Date instances,\n        // otherwise we have to convert the values to Date.\n        const parseTime = createDateNormalizer(scaleSpec)\n\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseTime(value as Date) as unknown as Value)\n                }\n            })\n        })\n    }\n\n    const values: unknown[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            values.push(getValue(d))\n        })\n    })\n\n    switch (scaleSpec.type) {\n        case 'linear': {\n            const all = sortBy(\n                // filer null values to deal with holes in linechart\n                uniq(values as number[]).filter(v => v !== null),\n                v => v\n            )\n\n            return { all, min: Math.min(...all), max: Math.max(...all) }\n        }\n        case 'time': {\n            const all = uniqBy(values as Date[], v => v.getTime())\n                .slice(0)\n                .sort((a, b) => b.getTime() - a.getTime())\n                .reverse()\n\n            return { all, min: all[0], max: last(all) }\n        }\n        default: {\n            const all = uniq(values)\n\n            return { all, min: all[0], max: last(all) }\n        }\n    }\n}\n\nexport const stackAxis = <S = never, D extends SerieDatum = SerieDatum>(\n    axis: ScaleAxis,\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => {\n    const otherAxis = getOtherAxis(axis)\n    const all: number[] = []\n\n    xy[otherAxis].all.forEach(v => {\n        const compare = (isDate(v) ? compareDateValues : compareValues) as Compare\n        const stack: Array<number | null> = []\n\n        series.forEach(serie => {\n            const datum = serie.data.find(d => compare(d.data[otherAxis], v))\n            let value = null\n            let stackValue = null\n\n            if (datum !== undefined) {\n                // stacked values only support numbers\n                value = datum.data[axis] as number\n                if (value !== null) {\n                    const head = last(stack)\n                    if (head === undefined) {\n                        stackValue = value\n                    } else if (head !== null) {\n                        stackValue = head + value\n                    }\n                }\n\n                datum.data[axis === 'x' ? 'xStacked' : 'yStacked'] = stackValue\n            }\n\n            stack.push(stackValue)\n\n            if (stackValue !== null) {\n                all.push(stackValue)\n            }\n        })\n    })\n\n    xy[axis].minStacked = Math.min(...all)\n    xy[axis].maxStacked = Math.max(...all)\n}\n\nconst stackX = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('x', xy, series)\n\nconst stackY = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('y', xy, series)\n","import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n    timeInterval,\n} from 'd3-time'\nimport { ScaleValue, TicksSpec, AnyScale, ScaleWithBandwidth } from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeDay = timeInterval(\n    date => date.setHours(0, 0, 0, 0),\n    (date, step) => date.setDate(date.getDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst utcDay = timeInterval(\n    date => date.setUTCHours(0, 0, 0, 0),\n    (date, step) => date.setUTCDate(date.getUTCDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = <Value extends ScaleValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    if (typeof spec === 'string' && 'useUTC' in scale) {\n        // time interval\n        const matches = spec.match(timeIntervalRegexp)\n\n        if (matches) {\n            const [, amount, type] = matches\n            // UTC is used as it's more predictable\n            // however local time could be used too\n            // let's see how it fits users' requirements\n            const timeType = timeByType[type][scale.useUTC ? 1 : 0]\n\n            if (type === 'day') {\n                const [start, originalStop] = scale.domain()\n                const stop = new Date(originalStop)\n\n                // Set range to include last day in the domain since `interval.range` function is exclusive stop\n                stop.setDate(stop.getDate() + 1)\n\n                return timeType.every(Number(amount ?? 1))?.range(start, stop) ?? []\n            }\n\n            if (amount === undefined) {\n                return scale.ticks(timeType)\n            }\n\n            const interval = timeType.every(Number(amount))\n\n            if (interval) {\n                return scale.ticks(interval)\n            }\n        }\n\n        throw new Error(`Invalid tickValues: ${spec}`)\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}