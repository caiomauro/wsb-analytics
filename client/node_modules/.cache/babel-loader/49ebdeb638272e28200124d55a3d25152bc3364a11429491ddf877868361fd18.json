{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport instances from '../../dom/instances';\nvar Default = {\n  minValue: null,\n  maxValue: null,\n  onIncrement: function () {},\n  onDecrement: function () {}\n};\nvar DefaultInstanceOptions = {\n  id: null,\n  override: true\n};\nvar InputCounter = /** @class */function () {\n  function InputCounter(targetEl, incrementEl, decrementEl, options, instanceOptions) {\n    if (targetEl === void 0) {\n      targetEl = null;\n    }\n    if (incrementEl === void 0) {\n      incrementEl = null;\n    }\n    if (decrementEl === void 0) {\n      decrementEl = null;\n    }\n    if (options === void 0) {\n      options = Default;\n    }\n    if (instanceOptions === void 0) {\n      instanceOptions = DefaultInstanceOptions;\n    }\n    this._instanceId = instanceOptions.id ? instanceOptions.id : targetEl.id;\n    this._targetEl = targetEl;\n    this._incrementEl = incrementEl;\n    this._decrementEl = decrementEl;\n    this._options = __assign(__assign({}, Default), options);\n    this._initialized = false;\n    this.init();\n    instances.addInstance('InputCounter', this, this._instanceId, instanceOptions.override);\n  }\n  InputCounter.prototype.init = function () {\n    var _this = this;\n    if (this._targetEl && !this._initialized) {\n      this._inputHandler = function (event) {\n        {\n          var target = event.target;\n          // check if the value is numeric\n          if (!/^\\d*$/.test(target.value)) {\n            // Regex to check if the value is numeric\n            target.value = target.value.replace(/[^\\d]/g, ''); // Remove non-numeric characters\n          }\n          // check for max value\n          if (_this._options.maxValue !== null && parseInt(target.value) > _this._options.maxValue) {\n            target.value = _this._options.maxValue.toString();\n          }\n          // check for min value\n          if (_this._options.minValue !== null && parseInt(target.value) < _this._options.minValue) {\n            target.value = _this._options.minValue.toString();\n          }\n        }\n      };\n      this._incrementClickHandler = function () {\n        _this.increment();\n      };\n      this._decrementClickHandler = function () {\n        _this.decrement();\n      };\n      // Add event listener to restrict input to numeric values only\n      this._targetEl.addEventListener('input', this._inputHandler);\n      if (this._incrementEl) {\n        this._incrementEl.addEventListener('click', this._incrementClickHandler);\n      }\n      if (this._decrementEl) {\n        this._decrementEl.addEventListener('click', this._decrementClickHandler);\n      }\n      this._initialized = true;\n    }\n  };\n  InputCounter.prototype.destroy = function () {\n    if (this._targetEl && this._initialized) {\n      this._targetEl.removeEventListener('input', this._inputHandler);\n      if (this._incrementEl) {\n        this._incrementEl.removeEventListener('click', this._incrementClickHandler);\n      }\n      if (this._decrementEl) {\n        this._decrementEl.removeEventListener('click', this._decrementClickHandler);\n      }\n      this._initialized = false;\n    }\n  };\n  InputCounter.prototype.removeInstance = function () {\n    instances.removeInstance('InputCounter', this._instanceId);\n  };\n  InputCounter.prototype.destroyAndRemoveInstance = function () {\n    this.destroy();\n    this.removeInstance();\n  };\n  InputCounter.prototype.getCurrentValue = function () {\n    return parseInt(this._targetEl.value) || 0;\n  };\n  InputCounter.prototype.increment = function () {\n    // don't increment if the value is already at the maximum value\n    if (this._options.maxValue !== null && this.getCurrentValue() >= this._options.maxValue) {\n      return;\n    }\n    this._targetEl.value = (this.getCurrentValue() + 1).toString();\n    this._options.onIncrement(this);\n  };\n  InputCounter.prototype.decrement = function () {\n    // don't decrement if the value is already at the minimum value\n    if (this._options.minValue !== null && this.getCurrentValue() <= this._options.minValue) {\n      return;\n    }\n    this._targetEl.value = (this.getCurrentValue() - 1).toString();\n    this._options.onDecrement(this);\n  };\n  InputCounter.prototype.updateOnIncrement = function (callback) {\n    this._options.onIncrement = callback;\n  };\n  InputCounter.prototype.updateOnDecrement = function (callback) {\n    this._options.onDecrement = callback;\n  };\n  return InputCounter;\n}();\nexport function initInputCounters() {\n  document.querySelectorAll('[data-input-counter]').forEach(function ($targetEl) {\n    var targetId = $targetEl.id;\n    var $incrementEl = document.querySelector('[data-input-counter-increment=\"' + targetId + '\"]');\n    var $decrementEl = document.querySelector('[data-input-counter-decrement=\"' + targetId + '\"]');\n    var minValue = $targetEl.getAttribute('data-input-counter-min');\n    var maxValue = $targetEl.getAttribute('data-input-counter-max');\n    // check if the target element exists\n    if ($targetEl) {\n      if (!instances.instanceExists('InputCounter', $targetEl.getAttribute('id'))) {\n        new InputCounter($targetEl, $incrementEl ? $incrementEl : null, $decrementEl ? $decrementEl : null, {\n          minValue: minValue ? parseInt(minValue) : null,\n          maxValue: maxValue ? parseInt(maxValue) : null\n        });\n      }\n    } else {\n      console.error(\"The target element with id \\\"\".concat(targetId, \"\\\" does not exist. Please check the data-input-counter attribute.\"));\n    }\n  });\n}\nif (typeof window !== 'undefined') {\n  window.InputCounter = InputCounter;\n  window.initInputCounters = initInputCounters;\n}\nexport default InputCounter;","map":{"version":3,"names":["instances","Default","minValue","maxValue","onIncrement","onDecrement","DefaultInstanceOptions","id","override","InputCounter","targetEl","incrementEl","decrementEl","options","instanceOptions","_instanceId","_targetEl","_incrementEl","_decrementEl","_options","__assign","_initialized","init","addInstance","prototype","_this","_inputHandler","event","target","test","value","replace","parseInt","toString","_incrementClickHandler","increment","_decrementClickHandler","decrement","addEventListener","destroy","removeEventListener","removeInstance","destroyAndRemoveInstance","getCurrentValue","updateOnIncrement","callback","updateOnDecrement","initInputCounters","document","querySelectorAll","forEach","$targetEl","targetId","$incrementEl","querySelector","$decrementEl","getAttribute","instanceExists","console","error","concat","window"],"sources":["../../../../src/components/input-counter/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}